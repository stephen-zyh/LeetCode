package UnionFind;

import java.util.Arrays;

/**
 * @author zhaoyh
 * @version 1.0
 * @description: leetcode 924
 * @date 2022/11/2 9:00
 */
public class MinimizeMalwareSpread {
    int[] root;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        root = new int[n];
        //初始化，将每一个节点的指针指向自己，即每一个节点都是根
        for (int i = 0; i < n; i++) {
            root[i] = i;
        }
        //节点i和节点j相连，将节点i的根指向节点j的根
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (graph[i][j] == 1){
                    connect(i, j);
                }
            }
        }
        int[] networkSize = new int[n]; //networkSize[i]：以节点i为根的网络的节点数，如果两个节点的根相同，它们必属于同一个图（网络）
        for (int i = 0; i < n; i++) {
            networkSize[findRoot(i)]++;
        }
        Arrays.sort(initial);
        int[] infectCount = new int[n]; //infectCount[i]：以节点i为根的网络中受感染的节点数
        for (int node : initial){
            infectCount[findRoot(node)]++;
        }
        int result = initial[0];
        int maxCount = 0;
        for (int node : initial){
            int root0 = findRoot(node);
            //更新结果需要两个条件：
            //①networkSize[root0] > maxCount：当前网络中节点更多，表示着去掉当前被感染节点能让更多节点不受感染
            //②infectCount[root0] == 1：如果当前网络中受干扰节点不止一个，那么即使去掉当前受感染节点，该网络仍然会被其他受感染节点感染
            if (networkSize[root0] > maxCount && infectCount[root0] == 1){
                result = node;
                maxCount = networkSize[root0];
            }
        }
        return result;
    }

    public void connect(int i, int j){
        int rootI = findRoot(i);
        int rootJ = findRoot(j);
        //将节点i的根指向节点j的根
        if (rootI != rootJ){
            root[rootI] = rootJ;
        }
    }

    //寻找节点i的根，根的特征是自己指向自己
    public int findRoot(int i){
        while (root[i] != i){
            i = root[i];
        }
        return i;
    }

    public static void main(String[] args) {
        int[][] graph = {{1,1,0},{1,1,0},{0,0,1}};
        int[] initial = {0,1};
        int result = new MinimizeMalwareSpread().minMalwareSpread(graph, initial);
        System.out.println(result);
    }
}
